package fr.thesmyler.log4shell.payloads;

import org.objectweb.asm.*;
import org.objectweb.asm.commons.ClassRemapper;
import org.objectweb.asm.commons.Remapper;
import org.objectweb.asm.commons.SimpleRemapper;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class PayloadGenerator {

    private final Map<String, Class<?>> classes = new HashMap<>();

    private byte[] generateClass(String name, Class<?> patternClass) throws IOException {

        ClassWriter classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);

        String classResource = "/" + patternClass.getName().replace(".", "/") + ".class";
        try (InputStream in = patternClass.getResourceAsStream(classResource)) {
            if (in == null) throw new IllegalStateException("Failed to find class resource.");
            ClassReader classReader = new ClassReader(in);
            Remapper mapper = new SimpleRemapper(this.getInternalClassName(patternClass.getCanonicalName()), this.getInternalClassName(name));
            ClassRemapper transformer = new ClassRemapper(classWriter, mapper);
            classReader.accept(transformer, 0);
        }
        return classWriter.toByteArray();
    }

    public byte[] generateJar() throws IOException {
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        try (ZipOutputStream zip = new ZipOutputStream(outStream)) {
            for (Map.Entry<String, Class<?>> entry: this.classes.entrySet()) {
                zip.putNextEntry(this.getEntryForName(entry.getKey()));
                zip.write(this.generateClass(entry.getKey(), entry.getValue()));
            }
        }
        return outStream.toByteArray();
    }

    private String getInternalClassName(String fullClassName) {
        fullClassName = fullClassName.replaceAll("\\.", "/");
        return fullClassName;
    }

    private ZipEntry getEntryForName(String fullClassName) {
        return new ZipEntry(fullClassName.replaceAll("\\.", "/") + ".class");
    }

    public void addClass(String className, Class<?> clazz) {
        this.classes.put(className, clazz);
    }

}
